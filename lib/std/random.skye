namespace std {
    namespace random {
        struct PseudoRandom {
            seed: u32;
        }

        impl std::random::PseudoRandom {
            fn new(seed: u32) Self {
                return Self.{ seed };
            }

            fn nextI32(self) i32 {
                let result: i32;
                let next = self.seed;

                next *= 1103515245;
                next += 12345;
                result = @cast(i32, (next / 65536) % 2048);

                next *= 1103515245;
                next += 12345;
                result <<= 10;
                result ^= @cast(i32, (next / 65536) % 2048);

                next *= 1103515245;
                next += 12345;
                result <<= 10;
                result ^= @cast(i32, (next / 65536) % 2048);

                self.seed = next;
                return result;
            }

            fn nextF32(self) f32 {
                return @cast(f32, self.nextI32()) / @cast(f32, @I32_MAX);
            }

            // TODO improve implementation for this, it's biased
            fn nextI32Range(self, min: i32, max: i32) i32 {
                return min + self.nextI32() % (max - min + 1);
            }

            fn nextF32Range(self, min: f32, max: f32) f32 {
                return min + self.nextF32() * (max - min + 1);
            }
        }
    }
}