#bind fn system(const command: *const char) i32;
#bind fn remove(const file: *const char) i32;

import <"dirent.h">;

#typedef struct CDir: DIR;
struct CDirent: dirent {
    // other fields currently aren't relevant for us
    const d_name: *const char
}

#bind fn opendir(const path: *const char) *CDir;
#bind fn readdir(const dir: *const CDir) *CDirent;
#bind fn closedir(const dir: *const CDir) i32;

namespace std {
    namespace os {
        macro SEPARATOR @WINDOWS ? '\\' : '/';

        fn system(const command: String) !i32 {
            let buf = core::Array::new[char]();
            defer buf.free();

            @format(&buf, "{command}\0");
            const result = system(buf.array.ptr);
            
            if (result) return (!i32)::Error(result);
            return (!i32)::Ok;
        }

        fn removeFile(const file: String) !String {
            let buf = core::Array::new[char]();
            defer buf.free();

            @format(&buf, "{file}\0");

            if remove(buf.array.ptr) {
                return (!String)::Error(core::utils::cStringToString(strerror(errno))); 
            }   

            return (!String)::Ok;
        }

        struct DirectoryIterator {
            const dir: &const CDir
        }

        impl std::os::DirectoryIterator {
            fn next(const self) ?(String!String) {
                use String!String as NextResult;
                use ?NextResult   as NextOption;

                errno = 0;
                const de = readdir(self.dir);

                if de == @nullptr {
                    if errno || closedir(self.dir) {
                        return NextOption::Some(NextResult::Error(core::utils::cStringToString(strerror(errno))));
                    } else {
                        return NextOption::None;
                    }
                }

                return NextOption::Some(NextResult::Ok(core::utils::cStringToString(de.d_name)));
            }
        }

        fn listDir(const path: String) std::os::DirectoryIterator!String {
            use std::os::DirectoryIterator!String as ListDirResult;

            let buf = core::Array::new[char]();
            defer buf.free();

            @format(&buf, "{path}\0");
            const dir = opendir(buf.array.ptr);

            if (dir == @nullptr) return ListDirResult::Error(core::utils::cStringToString(strerror(errno)));
            return ListDirResult::Ok(std::os::DirectoryIterator.{ dir });
        }
    }
}