impl[T] core::Slice[T] {
    fn max[T](const self) ?T {
        if self.length == 0 {
            return (?T)::None;
        }

        let max = self[0];
        for let i = 1usz; i < self.length; i++ {
            if self[i] > max {
                max = self[i];
            }
        }

        return (?T)::Some(max);
    }

    fn min[T](const self) ?T {
        if self.length == 0 {
            return (?T)::None;
        }

        let min = self[0];
        for let i = 1usz; i < self.length; i++ {
            if self[i] < min {
                min = self[i];
            }
        }

        return (?T)::Some(min);
    }
}

namespace std {
    namespace math {
        fn max2[T](a: T, b: T) T {
            return a > b ? a : b;
        }

        fn min2[T](a: T, b: T) T {
            return a < b ? a : b;
        }

        macro max(items*) items.max();
        macro min(items*) items.min();
    }
}