import "std/os";

namespace build {
    enum Mode as u8 {
        Debug,
        Release,
        ReleaseUnsafe
    }

    fn wrap[T](const source: String, const result: T) !void {
        if result.isError() {
            @println("{source}: {result.Error}");
            return (!void)::Error;
        }
    
        return (!void)::Ok;
    }

    fn system(const command: String) !void {
        @println("build::system: \"{command}\"");
        return build::wrap("build::system: non-zero return code", std::os::system(command));
    }

    fn removeFile(const file: String) !void {
        @println("build::removeFile: \"{file}\"");
        return build::wrap("build::removeFile", std::os::removeFile(file));
    }

    fn compileSkye(const input: String, const output: String, const compileMode: build::Mode) !void {
        let buf = core::Array::from("skye compile ");
        defer buf.free();

        @format(&buf, "{input} --emit-c -o {output}");

        switch compileMode {
            build::Mode::Debug {}
            build::Mode::Release       -> @format(&buf, " -c release");
            build::Mode::ReleaseUnsafe -> @format(&buf, " -c release-unsafe");
            default -> @unreachable;
        }

        try build::system(buf.asString());
    }

    fn compileCDefault(const input: String, const output: String) !void {
        let buf = core::Array::new[char](); 
        defer buf.free();

        if @UNIX_LIKE {
            buf.pushString("c99 -w -lm ");
        } else {
            @todo("This platform is not supported yet, sorry!");
        }
        
        @format(&buf, "{input} -o {output}");
        try build::system(buf.asString());
    }
}