import <<"core/internals.h">>;

// compiler built-ins
macro typeOf(item) void;
macro cast(type, item) void;
macro constCast(ptr) void;
macro concat(strings*) void;

use @typeOf(0u8)  as u8;
use @typeOf(0i8)  as i8;
use @typeOf(0u16) as u16;
use @typeOf(0i16) as i16;
use @typeOf(0u32) as u32;
use @typeOf(0i32) as i32;
use @typeOf(0f32) as f32;
use @typeOf(0u64) as u64;
use @typeOf(0i64) as i64;
use @typeOf(0f64) as f64;
use @typeOf(0usz) as usz;
use @typeOf('\0') as char;

#typedef use u8 as bool;
use 0u8 as false;
use 1u8 as true;

macro U8_MAX 255;
macro U8_MIN 0;
macro I8_MAX 127;
macro I8_MIN -128;

macro U16_MAX 65535;
macro U16_MIN 0;
macro I16_MAX 32767;
macro I16_MIN -32768;

macro U32_MAX 4294967295;
macro U32_MIN 0;
macro I32_MAX 2147483647;
macro I32_MIN -2147483648;

macro U64_MAX 18446744073709551615;
macro U64_MIN 0;
macro I64_MAX 9223372036854775807;
macro I64_MIN -9223372036854775808;

macro WINDOWS -> bool;
macro LINUX -> bool;
macro MAC_OS -> bool;
macro UNIX_LIKE -> bool;

macro empty(T) -> T;
macro sizeOf(E) -> usz;

macro nullptr 0;

use (
    u8  | i8  | u16 | i16 |
    u32 | i32 | u64 | i64 |
    usz
) as AnyInt;

use f32 | f64 as AnyFloat;

namespace core {
    struct Slice[T] {
        const ptr: *const T,
        const length: usz
    }

    impl[T] core::Slice[T] {
        fn new(const ptr: *const T, const length: usz) Self[T] {
            return Self.{ ptr, length };
        }

        fn get(const self, const idx: usz) ?T {
            if idx < self.length {
                return (?T)::Some(self.ptr[idx]);
            } else {
                return (?T)::None;
            }
        }

        fn iter(const self) core::SliceIterator[T] {
            return core::SliceIterator::new(self);
        }
    }
}

use core::Slice[char] as String;
use core::Slice;

fn __panicHandler(const at: String, const msg: String);

macro panic(msg) __panicHandler(PANIC_POS, msg);
macro unreachable @panic("Entered unreachable code");
macro assert(x) @COMPILE_MODE != 0 || x ? void : @panic("Assertion failed");
macro todo(msg) @panic(@concat("Not implemented yet: \"", msg, "\""));

namespace core {
    enum Option[T] {
        Some(T),
        None
    }

    impl[T] core::Option[T] {
        fn or(const self, const value: T) T {
            if self.kind == core::Option::Kind::Some {
                return self.Some;
            } else {
                return value;
            }
        }

        fn isSome(const self) bool {
            return self.kind == core::Option::Kind::Some;
        }

        fn isNone(const self) bool {
            return self.kind == core::Option::Kind::None;
        }
    }

    enum Result[T, U] {
        Ok(T),
        Error(U)
    }

    impl[T, U] core::Result[T, U] {
        fn or(const self, const value: T) T {
            if self.kind == core::Result::Kind::Ok {
                return self.Ok;
            } else {
                return value;
            }
        }

        fn isOk(const self) bool {
            return self.kind == core::Result::Kind::Ok;
        }

        fn isError(const self) bool {
            return self.kind == core::Result::Kind::Error;
        }
    }

    struct SliceIterator[T] {
        const slice: &const core::Slice[T],
        idx: usz
    }

    impl[T] core::SliceIterator[T] {
        fn new(const slice: &const core::Slice[T]) Self[T] {
            return core::SliceIterator.{ slice, idx: 0 };
        }

        fn next(self) ?T {
            return self.slice.get(self.idx++);
        }
    }

    namespace mem {
        fn blockCopy(from: voidptr, to: voidptr, amt: usz) {
            while amt-- {
                *@cast(*u8, to++) = *@cast(*u8, from++);
            }
        }

        fn typedBlockCopy[T](from: T, to: T, amt: usz) {
            while amt-- {
                *(to++) = *(from++);
            }
        }
    }
}

impl[T] core::Slice[T] {
    fn __constsubscript__(const self, idx: usz) *const T {
        if @COMPILE_MODE != 0 || idx < self.length {
            return self.ptr + idx;
        } else {
            @panic("Slice: out of bounds access");
        }
    }

    fn __eq__(const self, const other: &const Self[T]) bool {
        if (self.length != other.length) return false;

        for let i = 0usz; i < self.length; i++ {
            if self[i] != other[i] {
                return false;
            }
        }

        return true;
    }

    fn __ne__(const self, const other: &const Self[T]) bool {
        return !self.__eq__(other);
    }

    // TODO does this work?
    fn __lt__(const self, const other: &const Self[T]) bool {
        const lenLt = self.length < other.length;
        const len   = lenLt ? self.length : other.length;

        for let i = 0usz; i < len; i++ {
            if self[i] > other[i] {
                return false;
            }
        }

        if self.length == other.length {
            return self[self.length - 1] != other[self.length - 1];
        }

        return lenLt;
    }

    fn __le__(const self, const other: &const Self[T]) bool {
        const lenLt = self.length < other.length;
        const len   = lenLt ? self.length : other.length;

        for let i = 0usz; i < len; i++ {
            if self[i] > other[i] {
                return false;
            }
        }

        return self.length == other.length;
    }

    fn __gt__(const self, const other: &const Self[T]) bool {
        return other.__lt__(self);
    }

    fn __ge__(const self, const other: &const Self[T]) bool {
        return other.__le__(self);
    }
}

impl[T] core::Option[T] {
    fn expect(const self, msg: String) T {
        if self.kind == core::Option::Kind::Some {
            switch T {
                void    -> return;
                default -> return self.Some;
            }
        } else {
            @panic(msg);
        }
    }

    fn unwrap(const self) T {
        return self.expect("Option: unwrap on a None value");
    }
}

impl[T, U] core::Result[T, U] {
    fn expect(const self, msg: String) T {
        if self.kind == core::Result::Kind::Ok {
            switch T {
                void    -> return;
                default -> return self.Ok;
            }
        } else {
            @panic(msg);
        }
    }

    fn unwrap(const self) T {
        return self.expect("Result: unwrap on an Error value");
    }
}