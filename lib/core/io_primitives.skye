import <"stdlib.h">;
import <"stdio.h">;
import <"string.h">;
import <"math.h">;

#bind fn pow(base: f64, exp: f64) f64;

#bind fn malloc(size: usz) voidptr;
#bind fn realloc(ptr: voidptr, size: usz) voidptr;
#bind fn free(ptr: voidptr);
#bind fn strlen(const str: rawstring) usz;
#bind fn exit(code: i32);

#typedef struct CFile: FILE;
#bind fn fopen(filename: rawstring, mode: rawstring) *CFile;
#bind fn fclose(file: *CFile) i32;
#bind fn fwrite(ptr: voidptr, size: usz, nmemb: usz, file: *CFile) usz;
#bind fn fflush(file: *CFile) i32;
#bind fn fread(buf: voidptr, size: usz, count: usz, file: *CFile) usz;

// actually not macros but this "hides" the C handles a little bit
macro stdout -> *CFile;
macro stderr -> *CFile;
macro stdin  -> *CFile;

fn panic(const msg: String);

namespace core {
    namespace mem {
        struct HeapAllocator {}

        impl core::mem::HeapAllocator {
            fn new() Self {
                return Self.{};
            }

            fn allocRaw(self, const amt: usz) voidptr {
                const ptr = malloc(amt);

                if ptr == @nullptr {
                    panic("Could not allocate requested memory");
                }

                return ptr;
            }

            fn reallocRaw(self, const ptr: voidptr, const size: usz) voidptr {
                const newptr = realloc(ptr, size);

                if newptr == @nullptr {
                    panic("Could not allocate requested memory");
                }

                return newptr;
            }

            fn freeRaw(self, const ptr: voidptr) {
                free(ptr);
            }
        }

        let heapAllocator: core::mem::HeapAllocator;
    }

    namespace io {
        enum FileOpenMode {
            Read,
            Write,
            Append,
            ExistingRW,
            ReadWrite,
            ReadAppend,
            ReadBin,
            WriteBin,
            AppendBin,
            ExistingRWBin,
            ReadWriteBin,
            ReadAppendBin
        }

        fn fileOpenModeToCMode(const mode: core::io::FileOpenMode) rawstring {
            use core::io::FileOpenMode as f;

            switch mode {
                f::Read {
                    return `r\0`;
                }
                f::Write {
                    return `w\0`;
                }
                f::Append {
                    return `a\0`;
                }
                f::ExistingRW {
                    return `r+\0`;
                }
                f::ReadWrite {
                    return `w+\0`;
                }
                f::ReadAppend {
                    return `a+\0`;
                }
                f::ReadBin {
                    return `rb\0`;
                }
                f::WriteBin {
                    return `wb\0`;
                }
                f::AppendBin {
                    return `ab\0`;
                }
                f::ExistingRWBin {
                    return `rb+\0`;
                }
                f::ReadWriteBin {
                    return `wb+\0`;
                }
                f::ReadAppendBin {
                    return `ab+\0`;
                }
            }
        }

        struct File {
            const cFile: *CFile
        }

        impl core::io::File {
            fn fromCFile(const cFile: *CFile) Self {
                return Self.{ cFile };
            }

            fn open(const filename: String, const mode: core::io::FileOpenMode) Self!void {
                let buf = @cast(*char, core::mem::heapAllocator.allocRaw(filename.length + 1));
                defer core::mem::heapAllocator.freeRaw(@cast(voidptr, buf));

                core::mem::typedBlockCopy(@cast(*const char, filename.raw), buf, filename.length);
                buf[filename.length] = '\0';

                const cFile = fopen(@cast(rawstring, buf), core::io::fileOpenModeToCMode(mode));
                
                if cFile == @nullptr {
                    return (Self!void)::Error;
                }
                
                return (Self!void)::Ok(Self.{ cFile });
            }

            fn close(self) !void {
                if fclose(self.cFile) {
                    return (!void)::Error;
                }

                return (!void)::Ok;
            }

            fn write[T](self, const items: core::Slice[T]) !void {
                if fwrite(@cast(voidptr, items.ptr), @sizeOf(T), items.length, self.cFile) != items.length {
                    return (!void)::Error;
                }

                return (!void)::Ok;
            }

            fn flush(self) !void {
                if fflush(self.cFile) {
                    return (!void)::Error;
                }

                return (!void)::Ok;
            }

            // buf has to point to at least amt * size bytes
            fn readRaw(self, buf: voidptr, size: usz, amt: usz) usz {
                return fread(buf, size, amt, self.cFile);
            }
        }

        let stdOut: core::io::File;
        let stdErr: core::io::File;
        let stdIn:  core::io::File;
    }

    namespace utils {
        fn cStringLength(const str: rawstring) usz {
            return strlen(str);
        }
    }
}

fn _SKYE_PRIMITIVES_INIT() {
    core::io::stdOut = core::io::File::fromCFile(@stdout);
    core::io::stdErr = core::io::File::fromCFile(@stderr);
    core::io::stdIn  = core::io::File::fromCFile(@stdin);
}

fn panic(const msg: String) {
    let _ = core::io::stdOut.write("Skye program panicked!\n".asSlice());
    let _ = core::io::stdOut.write(msg.asSlice());
    let _ = core::io::stdOut.write({'\n'});
    let _ = core::io::stdOut.flush();
    exit(1);
}