import <"stdlib.h">;
import <"stdio.h">;
import <"string.h">;
import <"math.h">;
import <"errno.h">;

#bind fn pow(base: f64, exp: f64) f64;

#bind fn malloc(size: usz) voidptr;
#bind fn realloc(ptr: voidptr, size: usz) voidptr;
#bind fn free(ptr: voidptr);
#bind fn strlen(const str: *const char) usz;
#bind fn exit(code: i32);

#typedef struct CFile: FILE;
#bind fn fopen(filename: *const char, mode: *const char) *CFile;
#bind fn fclose(file: *CFile) i32;
#bind fn fwrite(ptr: voidptr, size: usz, nmemb: usz, file: *CFile) usz;
#bind fn fflush(file: *CFile) i32;
#bind fn fread(buf: voidptr, size: usz, count: usz, file: *CFile) usz;

#bind fn strerror(errnum: i32) *const char;

// actually not macros but this "hides" the C handles a little bit
macro stdout -> *CFile;
macro stderr -> *CFile;
macro stdin  -> *CFile;

let errno: i32;

namespace core {
    namespace utils {
        fn cStringLength(const str: *const char) usz {
            return strlen(str);
        }
    }

    namespace mem {
        struct HeapAllocator {}

        impl core::mem::HeapAllocator {
            fn new() Self {
                return Self.{};
            }

            fn allocRaw(self, const amt: usz) voidptr {
                const ptr = malloc(amt);

                if ptr == @nullptr {
                    @panic("core::mem::HeapAllocator: Could not allocate requested memory");
                }

                return ptr;
            }

            fn reallocRaw(self, const ptr: voidptr, const size: usz) voidptr {
                const newptr = realloc(ptr, size);

                if newptr == @nullptr {
                    @panic("core::mem::HeapAllocator: Could not allocate requested memory");
                }

                return newptr;
            }

            fn freeRaw(self, const ptr: voidptr) {
                free(ptr);
            }
        }

        let heapAllocator: core::mem::HeapAllocator;
    }

    namespace io {
        enum FileOpenMode as u8 {
            Read,
            Write,
            Append,
            ExistingRW,
            ReadWrite,
            ReadAppend,
            ReadBin,
            WriteBin,
            AppendBin,
            ExistingRWBin,
            ReadWriteBin,
            ReadAppendBin
        }

        fn fileOpenModeToCMode(const mode: core::io::FileOpenMode) *const char {
            return {
                 `r\0`,   `w\0`,   `a\0`,  `r+\0`, 
                `w+\0`,  `a+\0`,  `rb\0`,  `wb\0`, 
                `ab\0`, `rb+\0`, `wb+\0`, `ab+\0`
            }.ptr[@cast(u8, mode)];
        }

        struct File {
            const cFile: *CFile
        }

        impl core::io::File {
            fn fromCFile(const cFile: *CFile) Self {
                return Self.{ cFile };
            }

            fn open(const filename: String, const mode: core::io::FileOpenMode) Self!String {
                let buf = @cast(*char, core::mem::heapAllocator.allocRaw(filename.length + 1));
                defer core::mem::heapAllocator.freeRaw(@cast(voidptr, buf));

                core::mem::typedBlockCopy(filename.ptr, buf, filename.length);
                buf[filename.length] = '\0';

                const cFile = fopen(buf, core::io::fileOpenModeToCMode(mode));
                
                if cFile == @nullptr {
                    const ptr = strerror(errno);
                    return (Self!String)::Error(String.{ ptr, length: core::utils::cStringLength(ptr) });
                }
                
                return (Self!String)::Ok(Self.{ cFile });
            }

            fn close(self) !String {
                if fclose(self.cFile) {
                    const ptr = strerror(errno);
                    return (!String)::Error(String.{ ptr, length: core::utils::cStringLength(ptr) });
                }

                return (!String)::Ok;
            }

            fn write[T](self, const items: core::Slice[T]) !String {
                if fwrite(@cast(voidptr, @constCast(items.ptr)), @sizeOf(T), items.length, self.cFile) != items.length {
                    const ptr = strerror(errno);
                    return (!String)::Error(String.{ ptr, length: core::utils::cStringLength(ptr) });
                }

                return (!String)::Ok;
            }

            fn flush(self) !String {
                if fflush(self.cFile) {
                    const ptr = strerror(errno);
                    return (!String)::Error(String.{ ptr, length: core::utils::cStringLength(ptr) });
                }

                return (!String)::Ok;
            }

            // buf has to point to at least amt * size bytes
            fn readRaw(self, buf: voidptr, size: usz, amt: usz) usz {
                return fread(buf, size, amt, self.cFile);
            }
        }

        let stdOut: core::io::File;
        let stdErr: core::io::File;
        let stdIn:  core::io::File;
    }
}

fn _SKYE_PRIMITIVES_INIT() {
    core::io::stdOut = core::io::File::fromCFile(@stdout);
    core::io::stdErr = core::io::File::fromCFile(@stderr);
    core::io::stdIn  = core::io::File::fromCFile(@stdin);
}